version: 2.1
orbs:
  win: circleci/windows@2.2.0
  python: circleci/python@1.5.0 
  node: circleci/node@5.0.0
  aws-cli: circleci/aws-cli@1.3.1
  eb: circleci/aws-elastic-beanstalk@2.0.1
  browser: circleci/browser-tools@1.2.4
jobs:
  build:
    executor: node/default
    steps:
      - node/install:
          node-version: '16.13.1'
      - checkout
      - browser/install-chrome
      # - browser/install-chromedriver
      # - browser/install-firefox
      - aws-cli/setup
      - eb/setup

      # - run: #STABLE
      #     name: Install Chrome
      #     command: |
      #       CHROME_FLAGS_BASE="--no-first-run -start-maximized --no-sandbox --use-gl=swiftshader"
      #       CHROME_FLAGS_WASM="--enable-features=WebAssembly --enable-features=SharedArrayBuffer --disable-features=WebAssemblyTrapHandler --js-flags=\"--experimental-wasm-threads --harmony-sharedarraybuffer --no-wasm-disable-structured-cloning\""
      #       export EMTEST_BROWSER="xvfb-run -a -e /dev/stdout /usr/bin/google-chrome-stable $CHROME_FLAGS_BASE $CHROME_FLAGS_WASM"
      #     environment:
      #       CHROME_BIN: /usr/bin/google-chrome
      #      sudo apt update
      #      sudo apt upgrade
      #      sudo apt install wget
      #      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      #      sudo dpkg -i google-chrome-stable_current_amd64.deb
      #      sudo apt-get install -f
       
      - restore_cache:
          name: Restore Package Cache
          keys:
            - npm-packages-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run: 
          name: Install dependencies
          command: |
            npm install -g npm@8.3.2
      - save_cache:
          name: Save Package Cache
          key: npm-packages-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/project/node_modules/
      - run:
          name: Front-End Install
          command: |
            npm run frontend:install
      - run:
          name: Back-End Install
          command: |
            npm run api:install
      - run:
          name: Front-End Build
          command: |
            npm run frontend:build
      - run:
          name: Back-End Build
          command: |
            npm run api:build
      - run:
          name: Unit Test
          command: |
            npm run test
      - run:
          name: Deploy App
          command: |
            npm run frontend:deploy
            npm run api:deploy
      # - run:
      #     name: Deploy Environment Variables
      #     command: |   
      #       cd ./udagram-api
      #       eb setenv POSTGRES_USERNAME=$POSTGRES_USERNAME POSTGRES_PASSWORD=$POSTGRES_PASSWORD POSTGRES_DB=$POSTGRES_DB PORT=$PORT DB_PORT=$DB_PORT POSTGRES_HOST=$POSTGRES_HOST AWS_REGION=$AWS_DEFAULT_REGION AWS_PROFILE=$AWS_PROFILE AWS_BUCKET=$AWS_BUCKET URL=$URL JWT_SECRET=$JWT_SECRET
# workflows:
#   build_and_test:
#     jobs:
#       - build
#       - deploy:    
#           requires:
#             - build
            # - test